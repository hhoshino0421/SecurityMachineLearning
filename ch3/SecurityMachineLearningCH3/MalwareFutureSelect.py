import pandas as pd
import numpy as np
import sklearn
from sklearn.feature_selection import SelectFromModel
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.model_selection import train_test_split
from sklearn import model_selection

from MalwareDataFileRead import *


def malware_future_select():
    # # データの読み込み
    # malware_dataset = pd.read_csv('MalwareData.csv', sep='|')
    #
    # # データセットから名前、MD5ハッシュ値、ラベルといった列を除外してx_objに代入
    # x_obj = malware_dataset.drop(['Name', 'md5', 'legitimate'], axis='columns')
    #
    # # データセットのレベル列のみを抽出してyに代入
    # y_obj = malware_dataset['legitimate']
    #
    # # ExtraTreesClassifierを使用
    # fast_select = ExtraTreesClassifier().fit(x_obj, y_obj)
    #
    # # SelectFromModelを使用して
    # # ExtraTreesClassifierによる分類結果に寄与した重要度の大きい特徴量のみを抽出
    # model_obj = SelectFromModel(fast_select, prefit=True)
    #
    # # 重要度の大きい特徴量のカラム名を取得
    # feature_idx = model_obj.get_support()
    # feature_name = x_obj.columns[feature_idx]
    #
    # # Xに選択した特徴量のみを代入し直す
    # x_obj_2 = model_obj.transform(x_obj)
    #
    # # 重要度の大きい特徴量のカラム名を設定
    # x_obj_2 = pd.DataFrame(x_obj_2)
    # x_obj_2.columns = feature_name

    # データファイルの読み込み
    x_obj, y_obj = malware_data_read()

    # ここから重要度の高い特徴量の出力処理
    # 変形
    feature_obj = x_obj_2.shape[1]

    # 重要度をリストで抽出
    fi_obj = ExtraTreesClassifier().fit(x_obj_2, y_obj).feature_importances_

    # 重要度の高い順にソート処理
    index_obj = np.argsort(fi_obj)[::-1][:feature_obj]

    # 重要度の高い順に、特徴量の名前と重要度を出力
    for feat in range(feature_obj):
        print("Feature:{} Importance: {:.5f}".format(malware_dataset.columns[2 + index_obj[feat]]
                                                     .ljust(30), fi_obj[index_obj[feat]]))
