from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import train_test_split
import numpy as np
import optuna
from sklearn.model_selection import cross_validate

from MalwareDataFileRead import *


class Objective_RF:
    # 初期化処理
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __call__(self, trial):
        # 探索対象パラメータの設定
        criterion = trial.suggest_categorical("criterion", ["gini", "entropy"])
        bootstrap = trial.suggest_categorical("bootstrap", ["True", "False"])
        max_features = trial.suggest_categorical("max_features", ["auto", "sqrt", "log2"])
        min_samples_split = trial.suggest_categorical("min_samples_split", [2, 5])
        min_samples_leaf = trial.suggest_categorical("min_samples_leaf", [1, 10])

        model = RandomForestClassifier(
            criterion=criterion,
            bootstrap=bootstrap,
            max_features=max_features,
            min_samples_split=min_samples_split,
            min_samples_leaf=min_samples_leaf
        )

        # 交差検証しながらベストのパラメータ探索を行う
        scores = cross_validate(model, X=self.x, y=self.y, cv=5, n_jobs=-1)

        # ５分割で交差検証した正解率の平均値を返す
        return scores['test_score'].mean()


# ランダムフォレストによる機械学習用のパラメータチューニング処理
def malware_future_select_random_forest_tuning():

    # データファイルの読み込み
    x_obj, y_obj = malware_data_read()

    # データセットを訓練用とテス用に分割
    x_train, x_test, y_train, y_test = train_test_split(x_obj, y_obj, test_size=0.2, shuffle=True, random_state=101)

    # 探索の対象クラスを設定
    objective = Objective_RF(x_train, y_train)
    study = optuna.create_study()

    # 最大で３分間探索を実行
    study.optimize(objective, timeout=180)
    # ベストのパラメータの出力
    print("params:", study.best_params)

    # 探索結果で得られた最適パラメータとデータファイルからの読み込みデータを返送
    return study, x_obj, y_obj


# ランダムフォレストによる機械学習処理
# 事前に最適なパラメータチューニングが実行されていること
def malware_random_forest_learning(study_obj, x_obj, y_obj):

    # データセットを訓練用とテス用に分割
    x_train, x_test, y_train, y_test = train_test_split(x_obj, y_obj, test_size=0.2, shuffle=True, random_state=101)

    # optunaの探索結果として得られたベストのパラメータをモデルオブジェクトに設定
    model = RandomForestClassifier(
        criterion=study_obj.best_params['criterion'],
        bootstrap=study_obj.best_params['bootstrap'],
        max_features=study_obj.best_params['max_features'],
        min_samples_split=study_obj.best_params['min_samples_split'],
        min_samples_leaf=study_obj.best_params['min_samples_leaf']
    )

    # モデルの訓練実行
    model.fit(x_train, y_train)

    # テスト用のデータを利用して予想処理を実行
    pred = model.predict(x_test)

    # 予測結果とテスト用のデータを使って正答率を出力
    print("Accuracy: {:.5f} %".format(100 * accuracy_score(y_test, pred)))
    # 混合行列を出力
    print(confusion_matrix(y_test, pred))

